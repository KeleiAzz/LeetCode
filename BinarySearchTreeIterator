# Definition for a  binary tree node
class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class BSTIterator(object):
    def __init__(self, root):
        """
        :type root: TreeNode
        """
        self.node = root
        self.stack = []
        self.nxt = None

    def hasNext(self):
        """
        :rtype: bool
        """
        while True:
            if self.node is not None:
                self.stack.append(self.node)
                self.node = self.node.left
            else:
                if len(self.stack) > 0:
                    self.node = self.stack.pop()
                    self.nxt = self.node.val
                    self.node = self.node.right
                    return True
                else:
                    return False
    def next(self):
        """
        :rtype: int
        """
        return self.nxt

# Your BSTIterator will be called like this:
# i, v = BSTIterator(root), []
# while i.hasNext(): v.append(i.next())