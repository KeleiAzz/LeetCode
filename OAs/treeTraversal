class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

    def __str__(self):
        return str(self.val)


def generateBST(start, end):
    if start > end:
        return None
    mid = (start + end) / 2
    root = TreeNode(mid)
    root.left = generateBST(start, mid - 1)
    root.right = generateBST(mid + 1, end)
    return root


bst = generateBST(1, 10)

print bst, bst.left, bst.right


def pre_order_recur(root):
    print root.val,
    if root.left is not None:
        pre_order_recur(root.left)
    if root.right is not None:
        pre_order_recur(root.right)

pre_order_recur(bst)
print 'pre order'

def pre_order(root): # actually DFS
    node = root
    stack = [root]
    while len(stack) > 0:
        node = stack.pop()
        print node.val,
        if node.right:
            stack.append(node.right)
        if node.left:
            stack.append(node.left)

pre_order(bst)
print 'pre order'

def in_order(root):
    node = root
    stack = []
    done = 0
    while not done:
        if node is not None:
            stack.append(node)
            node = node.left
        else:
            if(len(stack) > 0):
                node = stack.pop()
                yield node.val
                node = node.right
            else:
                done = 1

def in_order_recur(root, res):
    if root is None:
        return
    in_order_recur(root.left, res)
    print root.val
    res.append(root.val)
    in_order_recur(root.right, res)

def peek(stack):
    if len(stack) > 0:
        return stack[-1]
    return None

def postOrderIterative(root):
    '''
    Post order with 1 stack
    :param root:
    :return:
    '''
    # Check for empty tree
    if root is None:
        return
    stack = []
    while(True):
        while (root):
             # Push root's right child and then root to stack
             if root.right is not None:
                stack.append(root.right)
             stack.append(root)

             # Set root as root's left child
             root = root.left
        # Pop an item from stack and set it as root
        root = stack.pop()
        # If the popped item has a right child and the
        # right child is not processed yet, then make sure
        # right child is processed before root
        if (root.right is not None and
            peek(stack) == root.right):
            stack.pop() # Remove right child from stack
            stack.append(root) # Push root back to stack
            root = root.right # change root so that the
                             # righ childis processed next

        # Else print root's data and set root as None
        else:
            # ans.append(root.data)
            yield root.val
            root = None

        if (len(stack) <= 0):
                break

def postOrderIterative2(root):
    '''
    Post order with two stack
    :param root:
    :return:
    '''
    # Create two stacks
    s1 = []
    s2 = []

    # Push root to first stack
    s1.append(root)

    # Run while first stack is not empty
    while(len(s1) >0):

        # Pop an item from s1 and append it to s2
        node = s1.pop()
        s2.append(node)

        # Push left and right children of removed item to s1
        if node.left is not None:
            s1.append(node.left)
        if node.right is not None :
            s1.append(node.right)

        # Print all eleements of second stack
    while(len(s2) > 0):
        node = s2.pop()
        print node.data,

def post_order_recur(root):
    '''
    post order recursive
    :param root:
    :return:
    '''
    if not root:
        return
    post_order_recur(root.left)
    post_order_recur(root.right)
    print root.val,

#pre_order(bst)
post_order_recur(bst)
print 'post order recur'
for i in postOrderIterative(bst):
    print i,
print 'post order'



print 'in order recur'
r = []
in_order_recur(bst, r)
print r